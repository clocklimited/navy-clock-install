var async = require('async')
  , path = require('path')
  , fs = require('fs')
  , upstartLocation = '/tmp'

module.exports = function createGenerateUpstart() {

  function generateUpstart(context, data, callback) {
    async.each
    ( Object.keys(data.services)
    , function (service, eachCallback) {
        createUpstartForService(service, context, data, eachCallback)
      }
    , function (error) {
        callback(error, data)
      }
    )
  }

  function createUpstartForService(service, context, data, callback) {
    var serviceName =  'node-' + context.appId + '-' + data.environment + '-' + service
      , serviceStartPath = data.services[service]
      , fileContents = ''
      , fileContentsEnvs = []

    context.emit('Generating upstart for: ' + serviceName)

    var fileContentsHeader =
      [ '# THIS FILE IS AUTOMATICALLY GENERATED BY NAVY - DO NOT MANUALLY EDIT'
      , 'description "' + service + ' ' + context.appId + ' ' + data.environment + '"'
      , ''
      , 'env NODE_ENV=' + data.environment
      , 'env NODE_START=' + path.join(data.finalDir, serviceStartPath)
      , 'env NODE_VERSION=v' + data.nodeVersion
      , ''
      ]

    if (data.customEnvVars) {
      fileContentsEnvs.push('')
      Object.keys(data.customEnvVars).forEach(function (key) {
        var envLine = 'env '
        envLine += key + '='
        envLine += data.customEnvVars[key]
        fileContentsEnvs.push(envLine)
      })
      fileContentsEnvs.push('')
    }

    var fileContentsFooter =
      [ ''
      , 'setuid node'
      , 'env HOME=/home/node'
      , ''
      , 'start on (local-filesystems and net-device-up IFACE=eth0)'
      , 'stop  on shutdown'
      , ''
      , 'respawn                # restart when job dies'
      , 'respawn limit 5 60     # give up restart after 5 respawns in 60 seconds'
      , ''
      , 'exec /usr/local/bin/nave use $NODE_VERSION node $NODE_START'
      ]
    fileContents = fileContentsHeader.join('\n')
    fileContents += fileContentsEnvs.join('\n')
    fileContents += fileContentsFooter.join('\n')

    // UPSTART DIFF

    var upstartFilePath = path.join(upstartLocation, serviceName + '.conf')
    fs.writeFile(upstartFilePath, fileContents, callback)
  }

  return generateUpstart
}
